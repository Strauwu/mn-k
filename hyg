import heapq
import sys
from typing import Optional
import heapq


class State:
    def __init__(self, columns: 'list[list[int]]', score: int = 0):
        self.columns = columns
        self.score = score


    def __str__(self):
        w = len(self.columns)
        if w == 0:
            return '.'
        h = max(len(col) for col in self.columns)
        rows = []
        for y in range(h - 1, -1, -1):
            row = []
            for x in range(w):
                row.append('.' if y >= len(self.columns[x]) else str(self.columns[x][y]))
            rows.append(' '.join(row))
        return '\n'.join(rows)


    def moves(self) -> 'list[list[tuple[int, int]]]': #писок ходов одноцветные области
        visited_tiple = set() #список с посещенными тайлами
        moves =[]
        for x, column in enumerate(self.columns):
            for y, color in enumerate(column):    # где то здесь должен быть чекуда
                if (x,y) not in visited_tiple:
                    move = self.dfs(x, y, [])
                    if len(move)>1:
                        moves.append(move)
                        visited_tiple.update(move)
        return moves

    def dfs(self, x: int, y: int, move: 'list[tuple[int, int]]'):
        w = len(self.columns) #количество тайлов на поле всего
        move.append((x,y))
        color = self.columns[x][y] # цвет это координата в columns
        for ny,nx in (y - 1, x), (y+1, x), (y, x-1), (y, x+1): # рассматриваем для соседей
            if 0 <= nx < w and 0<= ny < len(self.columns[nx]):  # проверка не вылез ли сосед за поле
                if self.columns [nx][ny] == color and (nx, ny) not in move:
                    self.dfs(nx, ny, move)
        return move



    def apply_move(self, move: 'list[tuple[int, int]]') -> 'State':
        new_columns = []
        for x, column in enumerate(self.columns):       # смотрим по х
            new_column = []
            for y, color in enumerate(column):          # смотрим по у
                if (x, y) not in move:                  #если координата не в move
                    new_column.append(color)            # добавляем в новый столбец
            if len(new_column) != 0:                    # если новый столбец не пустой
                new_columns.append(new_column)          # добавляем его в новые столбцы
        new_score = self.score + (len(move)-2)**2
                                                 # новый счет равен счету до этого и
                                                 # ( счет ходов по формуле = ((х-2)**2)

        if len(new_columns) == 0:                                       # словно за ачивку
            self.score +=1000

        new_state = State(new_columns, new_score) #создаем новое состояние и возвращаем его
        return new_state







states = [] #это список списков состояний,
#внутри states t будет список нераскрытых серых состояний
#как бы список слоев которые также являются списками
heapq.heappush(states, new_item) # добавляет в кучу, куда и какой элемент
min_item = heapq.heappop(states)  # находит мин элемент и извлеает его(удаляет и возвращает)

# пока есть время с нулегого слоя
 t = 0
 for i in range:
    estimate(state[t])
    if max(estimate(state[t]))==:

ноды это по сути тоже чтото вроже одноцветных областей
чтобы получить всевозможные нодесы нужно
попытаться удалить каждую одноцветную область
еще как то запоминать информацию о нодесах которых нет уже
для получения стате нужно каждый раз проверять через апли мув



node = (state, parent_node, move)


def get_next_nodes(node):                   #создает список следующих узлов дереева игры
                                                # мы передаем ей один нод а она
                                            # возращает все ноды которые можено получить из данного нода

    list_variable_nodes = []                # создаем возможные нудесы
    moves = state.moves()                    #копируем мувисы

    for move in moves:                      #на проятжении хода в ходах
        node[2].apply_move(move)               # применяем к ноду апли мув
        list_variable_nodes.append(node)   # добавляя в возможные ходы
    return list_variable_nodes

состояние игры. объект класса стате

node = (state, parent_node, move) rjhnt;
парент нод должен тоже быть такой тройкой tate parent node and move
states[t].append(node)



    return list_variable_nodes






def best_states_t():                                    #  найти  tates[t] самое лучшее остояние(
    minscore = -133333
    while t<20:
        for t in states[t]:                                 эстимаье запускаем на каждом состоянии,
            if states[t].estimate > minscore:               #находим состоиние на котором естимате самоке большое знаение) если нашили то
                min_item = heapq.heappop(states)                # находит мин элемент и извлеает его(удаляет и возвращает)
                                                                #получаем все следующие из него состояния и добавляем их в статесХ(т+1)
# next_node = (state, parent_node, move)
# heapq.heappush(states[t], (-score,next_node))
                # best_node = heapq.heappop(states[t])
# надо будет вернуть пару некст нод и взят 2 компонент и получить сам нод
                generation = 0  введем компоненту в тапле
# /////
# heapq.heappush(states[t], (-score, generation, node))
# heneration +=1

#get_moves  востанавливает список ходов которые привели в финал узел по финальному узлу в дереве


                states[t+1].append(min_item.get_next_nodes(node))

                minscore = states[t].estimate
            if states[t] is not None:
                t = t+1
            if # если по пути встречаем конечные состояния запоминаем их и в самом конце выберем лучшее



def chokudai():                                             #с находит финальный(лучший узел в древере
    states[t] = []                                                  #список состояний посде т ходов
    while time<20:
        get_next_nodes(node)                                # раскрывам узеел
        t = 0
        if estimate(state[t]):




def FindMove(state, move, parent)
    best_node = (state, move, parent)                                # самый лучший финальный узел
    past_moves = []                                                     # куда будем сохранять ходы
    while best_node[3] != None:                                      # пока у нас есть родители
        past_move.append(best_node[1])                                 # добавляем в ходы ход из бест мувис
        best_node = parent                                                 #"возращаемся" на шаг назат чтобы восстановить цепочку
    Past_M_Reverse = past_moves.reverse()                                  #переворачиваем список для последовательности ходов
return Past_M_Reverse



def estimate(state: State) -> float:

    colors = [0,0,0,0,0]
    for column in state.columns:
        for color in column:
            colors[color]+=1
    max_color_count, max_color = max((count,color) for color, count in enumerate(colors))
    moves = state.moves()
    dL = 0
    for move in moves:
        dL += (len(move)-2)**2
    return sum(colors) + max_color_count*100+state.score + dL

def solve(state: State) -> 'list[list[tuple[int, int]]]':

    solution = []
    while True:
        move = greedy_ai(state, estimate)
        if move is None:
            break
        solution.append(move)
        state = state.apply_move(move)
    return solution


def read_state_from(lines: 'list[str]') -> State:

    rows = []
    for line in lines:
        row = []
        for color in line.split():
            row.append(-1 if color == '.' else int(color))
        rows.append(row)


    cols = [[row[x] for row in reversed(rows) if row[x] != -1] for x in range(len(rows[0]))]
    return State(cols)


def read_state() -> State:


    lines = [input() for _ in range(15)]
    return read_state_from(lines)


def main():
    first_move = True
    move_index = 0
    moves = []
    while True:
        state = read_state()
        if first_move:
            print(state, file=sys.stderr)
            moves = solve(state)
        move = moves[move_index]
        x, y = move[0]
        move_index += 1
        print(x, y)
        first_move = False


if __name__ == '__main__':
    main()
